/*
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

#include <iostream>

int main()
{
  /*int triNumber;
  std::cout << "Insert the triangle number: ";
  std::cin >> triNumber;

  int triValue = 0;
  int sumDivisor = 0;

  do //to calculate the term
  {
    triValue += triNumber;
    std::cout << "Value: " << triValue << std::endl;
  } while(--triNumber);

  for (int i = 1; i <= triValue; ++i)
  {
    if (triValue % i == 0)
    {
      std::cout << "divisor: " << i << std::endl;
      sumDivisor += i;
    }
  }

  std::cout << "The value is: " << sumDivisor << std::endl;*/

  int divisorNumber = 0;
  int temp = 0;
  int st = 0;
  int sum = 0;
  int largest = 0;

  std::cout << "Insert a value: ";
  std::cin >> divisorNumber;

  for (int i = 1; i > 0; ++i)
    {
      temp += i;
      for (int j = 1; j <= temp; ++j)
      {
        if (temp % j == 0 && st != divisorNumber && j > largest)
        {
          largest = j;
          ++st;
          sum += j;
          std::cout << "divisor is: " << j << std::endl;
        }
      }
     if (st == divisorNumber)
        break;
    }

    std::cout << "sum: " << sum << std::endl;
    std::cout << "value: " << temp << std::endl;
  return 0;
}
